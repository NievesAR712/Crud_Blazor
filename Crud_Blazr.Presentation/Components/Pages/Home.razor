@page "/"
@using System.Diagnostics
@using Crud_Blazr.Core.Models
@using Crud_Blazr.SignalR.Serv.Comandos
@using Crud_Blazr.SignalR.Serv.Enums
@using Crud_Blazr.Application.Services
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Json


@inject UserService UserService
@inject NavigationManager Navigation

<h3>Lista de usuarios</h3>

@if (isLoading)
{
    <p>Cargando...</p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Nombre</th>
                <th scope="col">Email</th>
                <th scope="col">Teléfono</th>
                <th scope="col">Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in users)
            {
                <tr>
                    <th scope="row">@user.Id</th>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@user.Phone</td>
                    <td>
                        <button type="button" class="btn btn-outline-primary" @onclick="() => NavigateToEdit(user.Id)">Editar</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="() => DeleteUser(user)">Eliminar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Usuario> users = new();
    private bool isLoading = true;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        try
        {

            users = (await UserService.GetAllUsersAsync()).ToList();

            hubConnection = new HubConnectionBuilder()
            .WithUrl("https://localhost:7198/signalRHub")
            .Build();

            /*hubConnection.On<string>("UserDeleted", (data) =>
            {
                Debug.WriteLine($"Usuario eliminadocon comando: {data}");
                RecargarM();
                InvokeAsync(StateHasChanged);
            });
            hubConnection.On<string>("UserAdded", (data) =>
            {
                Debug.WriteLine($"Usuario agregado con comando: {data}");
                RecargarM();
                InvokeAsync(StateHasChanged);
            });
            hubConnection.On<string>("UserEdit", (data) =>
            {
                Debug.WriteLine($"Usuario editado con comando: {data}");
                RecargarM();
                InvokeAsync(StateHasChanged);
            });*/
            hubConnection.On<string>("IncomingMessage", (message) =>
    {
                Console.WriteLine($"Mensaje recibido: {message}");
                RecargarM();
                InvokeAsync(StateHasChanged);
            });


            await hubConnection.StartAsync();
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error al cargar los usuarios: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async void RecargarM()
    {
        Debug.WriteLine("Recarge manualmente");
        users = (await UserService.GetAllUsersAsync()).ToList();
        InvokeAsync(StateHasChanged);
    }
    private void NavigateToEdit(int userId)
    {
        Navigation.NavigateTo($"useredit/{userId}");
    }

    private async Task DeleteUser(Usuario user)
    {
        try
        {
            await UserService.DeleteUserAsync(user.Id);
            /*if(hubConnection is not null)
            {
                await hubConnection.SendAsync("Commandos", new ComandoUser { Command = CommandType.DeleteUser, Data = JsonSerializer.Serialize(user)} );
            }*/
            if(hubConnection is not null)
            {
                await hubConnection.SendAsync("IncomingMessage", new ComandoUser { Command = CommandType.DeleteUser, Data = JsonSerializer.Serialize(user) });
            }
            users = (await UserService.GetAllUsersAsync()).ToList();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Debug.WriteLine($"Error al borrar usuario: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }
}
